1) To print stopped services starting with letter 's' (case-sensitive) and send the output to na text file.  
   Get-Service | Where-Object {$_.Status -eq "Stopped" -and $_.Name -clike "s*"} > C:\Users\noman\Desktop\Test.txt  

2) To retrieve the details of the first 3 services running in local system and export the contents in a csv(comma separated value) format.  
   Get-Service | Where-Object {$_.Status -eq "Running"} | Select -First 3 | Export-Csv -Path C:\Users\noman\Desktop\Test1.csv  

3) Display the last five sorted output of Get-Service cmdlet on the basis of the "Displayname" field.  
   Get-Service | Sort-Object -Property DisplayName | Select -Last 5  

4) PowerShell script to fetch the details of top 5 processes consuming high CPU time. he script should also retrieve details about the the total number of processes running in the system along with the value of highest CPU time consumed.  
   Get-Process | Sort-Object -Property CPU -Descending | Select -First 5
   Get-Process | Measure-Object -Property CPU -Maximum | Select Count,Maximum

5) Retrieve the process details(such as ProcessName, ID, VM, CPU) which consumes the maximum amount of virtual memory
   Get-Process | Sort-Object -Property VM -Descending | Select -First 1 | Select ProcessName,Id,VM,CPU  

6) To fetch the source details of the application logs having errors from the csv file into another text file. The source details need to be displayed in 5 columns.
   Import-Csv -Path "C:\PowerShell\Eventlogs.csv" | Where-Object {$_.Entrytype -eq "Error"} | Select-Object Source | Format-Wide -Column 5 | Out-file -FilePath "C:\PowerShell\Events.txt"

7) Retrieve the first 10 source and instance id details of the system logs having error records and display the result in a tabular format.
   Get-EventLog -LogName system | Where-Object {$_.EntryType -eq "Error"} | Select -First 10 Source,InstanceId | Format-Table

8) John wants to retrieve the contents from the C: drive of his system. He then creates a new folder named "MyData" in the C: drive to save some confidential information. After a random check from the CCD, John has been asked to move all personal information to D: drive of his system. 
   Get-ChildItem -Path C:\
   New-Item -Path C:\ -Name MyData -Type Directory
   Move-Item -Path C:\MyData -Destination D:\

9) PowerShell script to delete all text files present in the location "D:\ExploreFiles"
   Remove-Item -Path D:\ExploreFiles\*.txt -Recurse

10) Powershell script to retrieve all the log details showing error messages from last 3 days to current date. 
    Function Log
    {
    param([string]$logtype)
    $dte=(Get-Date).AddDays(-3)
    Get-EventLog -LogName $logtype -EntryType Error -After $dte
    }

11) 
 



